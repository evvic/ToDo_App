[{"C:\\Users\\javi0\\Documents\\practicalWork\\practical-work-t02\\frontend\\src\\index.js":"1","C:\\Users\\javi0\\Documents\\practicalWork\\practical-work-t02\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\javi0\\Documents\\practicalWork\\practical-work-t02\\frontend\\src\\App.js":"3","C:\\Users\\javi0\\Documents\\practicalWork\\practical-work-t02\\frontend\\src\\components\\ToDoList.js":"4","C:\\Users\\javi0\\Documents\\practicalWork\\practical-work-t02\\frontend\\src\\components\\AddItem.js":"5"},{"size":502,"mtime":1609203558036,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"7"},{"size":429,"mtime":1609355200845,"results":"9","hashOfConfig":"7"},{"size":1123,"mtime":1609357672132,"results":"10","hashOfConfig":"7"},{"size":8843,"mtime":1609355200846,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14","usedDeprecatedRules":"15"},"1knh6gp",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"15"},"C:\\Users\\javi0\\Documents\\practicalWork\\practical-work-t02\\frontend\\src\\index.js",["25"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n",["26","27"],"C:\\Users\\javi0\\Documents\\practicalWork\\practical-work-t02\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\javi0\\Documents\\practicalWork\\practical-work-t02\\frontend\\src\\App.js",[],"C:\\Users\\javi0\\Documents\\practicalWork\\practical-work-t02\\frontend\\src\\components\\ToDoList.js",["28","29","30"],"C:\\Users\\javi0\\Documents\\practicalWork\\practical-work-t02\\frontend\\src\\components\\AddItem.js",["31","32","33","34","35"],"import React, { useState } from 'react';\r\nimport './ToDoList.css';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport InputGroup from 'react-bootstrap/InputGroup'; //text & button\r\nimport FormControl from 'react-bootstrap/Form';\r\n\r\nconst AddItem = props => {\r\n\r\n    const [refreshing, setRefreshing] = useState(false);\r\n\r\n    function ListItem(props) {\r\n\r\n        const HandleTrash = () => {\r\n            console.log(\"in HandleTrash\");\r\n            console.log(props.item.id);\r\n\r\n            if (itemsdo.length > 0) {\r\n                itemsdo[props.item.id].date_completed = new Date();\r\n            }\r\n            else {\r\n                console.log(\"itemsdo is empty\");\r\n            }\r\n            setRefreshing(true);\r\n            console.log(\"leaving handle\");\r\n        }\r\n\r\n        const HandleReturn = () => {\r\n            console.log(\"in HandleReturn\");\r\n            console.log(props.item.id);\r\n\r\n            itemsdo[props.item.id].date_completed = null;\r\n            setRefreshing(true);\r\n        }\r\n\r\n\r\n        const PermanentDelete = () => {\r\n            //decrement trailing items\r\n\r\n            var j = props.item.id;\r\n            itemsdo.splice(props.item.id, 1);\r\n\r\n            for (j; j < itemsdo.length; j++) {\r\n                console.log(\"in for loop\");\r\n                console.log(itemsdo[j].id);\r\n                itemsdo[j].id = j;\r\n            }\r\n            setRefreshing(true);\r\n        }\r\n\r\n\r\n        //if(props.item.date_completed != null) setTrashed(true);\r\n        console.log(\"near ListItem return\");\r\n        return (\r\n            //nested if statement\r\n            (props.done === false) ?\r\n                //in current tasks\r\n                (props.item.date_completed != null) ?\r\n                    <>\r\n                        {/*should display nothing in current tasks*/}\r\n                    </>\r\n                    :\r\n                    <>\r\n                        <Card className='taskitem'>\r\n                            <Card.Body className='taskitembody'>\r\n                                <span className=\"badge badge-primary badge-pill\" style={{margin:\"6px\"}}>{props.item.id}</span>\r\n                                {props.item.text}\r\n                                <a className=\"ui-tooltip\" title=\"task completed\">\r\n                                    <span style={{cursor:\"help\"}}>          \r\n                                        <Button className='cardbutton' onClick={HandleTrash}>\r\n                                            <Emoji symbol=\"✔️\"/>\r\n                                        </Button>{' '}   \r\n                                    </span>\r\n                                </a>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </>\r\n                :\r\n                //in completed tasks\r\n                (props.item.date_completed == null) ?\r\n                    <>\r\n                        {/*should display nothing in comleted tasks*/}\r\n                    </>\r\n                    :\r\n                    <>\r\n                        <Card className='taskitem' style={{filter:\"brightness(0.9)\"}}>\r\n                            <Card.Body className='taskitembody'>\r\n                                <span className=\"badge badge-primary badge-pill\" style={{margin:\"6px\"}}>{props.item.id}</span>\r\n                                {props.item.text}\r\n                                <a className=\"ui-tooltip\" title=\"return task to list\">\r\n                                    <span style={{cursor:\"help\"}}>\r\n                                        <Button className='cardbutton' onClick={HandleReturn}>\r\n                                            <Emoji symbol=\"♻️\"/>\r\n                                        </Button>\r\n                                    </span>\r\n                                </a>\r\n                                <a className=\"ui-tooltip\" title=\"permanently delete task\">\r\n                                    <span style={{cursor:\"help\"}}>\r\n                                        <Button className='cardbutton' onClick={PermanentDelete}>\r\n                                            <Emoji symbol=\"🗑️\"/>\r\n                                        </Button>{' '}\r\n                                    </span>\r\n                                </a>\r\n                                \r\n                            </Card.Body>\r\n                        </Card>\r\n                    </>\r\n        )\r\n\r\n    }\r\n\r\n    const [task, setTask] = useState({\r\n        text: \"\",\r\n        date_created: null,\r\n        date_completed: null,\r\n    });\r\n    const [added, setAdded] = useState(false);\r\n    const [valid, setValid] = useState(false);\r\n    const [typing, setTyping] = useState(false);\r\n    const [showDone, toggleShow] = useState(false); //shows 'deleted' tasks\r\n\r\n   \r\n    const HandleInputChange = (event) => {\r\n        setTask({...task,\r\n            text: event.target.value,\r\n            date_created: new Date() });\r\n        setTyping(true);\r\n        //console.log(task);\r\n    } \r\n\r\n    // when button/enter is pressed, check it has text and set true\r\n    const HandleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if(task.text) setValid(true);\r\n        setAdded(true);\r\n        appendItem(task);\r\n        ResetInput(task);\r\n    }\r\n\r\n    // array of tasks TO-DO\r\n    var [itemsdo, setItems] = useState([]);\r\n\r\n    //mapping array of items to do\r\n    const listitemstodo = itemsdo.map(item => (\r\n        <li key={item.id}>\r\n            <ListItem key={item.id} item={item} done={false}></ListItem>\r\n        </li>\r\n    ))\r\n\r\n    // array of tasks DONE\r\n    //var [itemsdone, setDoneItems] = useState([]);\r\n\r\n    //mapping array of items to do\r\n    const listitemsdone = itemsdo.map(item => (\r\n        <li key={item.id}>\r\n            <ListItem key={item.id} item={item} done={true}></ListItem>\r\n        </li>\r\n    ))\r\n\r\n    const appendItem = (task) => {\r\n        setItems([...itemsdo, {\r\n            id: itemsdo.length, //i\r\n            text: task.text,\r\n            date_created: task.date_created,\r\n            date_completed: task.date_completed,\r\n        }])\r\n    }\r\n\r\n    const ResetInput = (task) => {\r\n        setTask({\r\n            ...task,\r\n            text: \"\",\r\n            date_created: null\r\n        });\r\n        setAdded(false);\r\n        setTyping(false);\r\n    }\r\n\r\n\r\n    console.log(\"near AddItem return\");\r\n    return (\r\n        <>\r\n        <Card className='maincard'>\r\n\r\n            <h1>To Do List</h1>\r\n            {(refreshing) && //inline 'IF' statement for showing list of deleted tasks\r\n                <ul>\r\n                    <p>refreshing</p>\r\n                    {setRefreshing(false)}\r\n                </ul>\r\n            }\r\n\r\n            <div className='Adding'>\r\n                <form className='sumthin' onSubmit={HandleSubmit}>\r\n                    {(added || !typing) && valid ? <div className='success-message'>Task successfully added!</div> : null}\r\n\r\n                    <InputGroup className=\"mb-3\">\r\n                        <input\r\n                            onChange={HandleInputChange}\r\n                            required='required'\r\n                            value={task.text}\r\n                            placeholder='add new task'\r\n                            className='adding-box'/>\r\n                        <InputGroup.Append>\r\n                            <Button type='submit'>Add</Button>{' '}\r\n                        </InputGroup.Append>\r\n                    </InputGroup>\r\n                </form>\r\n            </div>\r\n\r\n            <ul>\r\n                {listitemstodo}\r\n            </ul>\r\n\r\n            {(itemsdo.length > 0) && \r\n            <>\r\n                <br />\r\n                <a className=\"ui-tooltip\" title=\"toggle showing completed tasks\">\r\n                    <span style={{cursor:\"help\"}}>\r\n                        <Button className='showdone' onClick={() => toggleShow(!showDone)}>\r\n                            {(showDone) ? \"Don't show\" : \"Show completed tasks\"}\r\n                        </Button>\r\n                    </span>\r\n                </a>\r\n    \r\n                <br/>\r\n                \r\n                {console.log(showDone)}\r\n                {(showDone) && //inline 'IF' statement for showing list of deleted tasks\\\r\n                    //add a message that theres no trash if there's no trash\r\n                    <ul>\r\n                        {listitemsdone}\r\n                    </ul>\r\n                }\r\n            </>\r\n            }\r\n            \r\n        </Card>\r\n        </>\r\n    );\r\n};\r\n\r\nconst Emoji = props => (\r\n    <span\r\n        className=\"emoji\"\r\n        role=\"img\"\r\n        aria-label={props.label ? props.label : \"\"}\r\n        aria-hidden={props.label ? \"false\" : \"true\"}\r\n    >\r\n        {props.symbol}\r\n    </span>\r\n);\r\n\r\nexport default AddItem;\r\n",{"ruleId":"36","severity":1,"message":"37","line":5,"column":8,"nodeType":"38","messageId":"39","endLine":5,"endColumn":23},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":15,"column":15,"nodeType":"46","endLine":23,"endColumn":6},{"ruleId":"44","severity":1,"message":"47","line":23,"column":8,"nodeType":"48","endLine":23,"endColumn":10,"suggestions":"49"},{"ruleId":"36","severity":1,"message":"50","line":34,"column":19,"nodeType":"38","messageId":"39","endLine":34,"endColumn":26},{"ruleId":"36","severity":1,"message":"51","line":7,"column":8,"nodeType":"38","messageId":"39","endLine":7,"endColumn":19},{"ruleId":"52","severity":1,"message":"53","line":69,"column":33,"nodeType":"54","endLine":69,"endColumn":82},{"ruleId":"52","severity":1,"message":"53","line":91,"column":33,"nodeType":"54","endLine":91,"endColumn":87},{"ruleId":"52","severity":1,"message":"53","line":98,"column":33,"nodeType":"54","endLine":98,"endColumn":91},{"ruleId":"52","severity":1,"message":"53","line":219,"column":17,"nodeType":"54","endLine":219,"endColumn":82},"no-unused-vars","'reportWebVitals' is defined but never used.","Identifier","unusedVar","no-native-reassign",["55"],"no-negated-in-lhs",["56"],"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'url'. Either include it or remove the dependency array.","ArrayExpression",["57"],"'loading' is assigned a value but never used.","'FormControl' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"58","fix":"59"},"Update the dependencies array to be: [url]",{"range":"60","text":"61"},[618,620],"[url]"]